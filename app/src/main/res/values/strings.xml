<resources>
    <string name="app_name">Java</string>

    <string name="f1m1">
        "در این دوره قصد داریم در رابطه با زبان برنامه نویسی جاوا با هم صحبت کنیم. زبان جاوا به عنوان یک پیش نیاز برای زبان برنامه نویسی اندروید محسوب می شود. آشنا شدن با زبان جاوا نه به طور کامل، بلکه به صورت کلی و یادگیری مطالب مهم در رابطه با این زبان، می تواند باعث درک و فهم بهتر ما از برنامه نویسی اندروید شود.
برای آشنایی بیشتر با پیش نیازهای زبان برنامه نویسی اندروید می توانید از طریق لینک زیر مقاله ای را در این رابطه مطالعه نمایید.
سه پیش نیاز مهم برنامه نویسی اندروید
در این دوره در این دوره می خواهیم یکسری مطالب و نکته های ساده و در عین حال مهم و کلیدی را در رابطه با زبان جاوا یاد بگیریم.
متغیر چیست؟
اولین قسمت مربوط به هر زبان برنامه نویسی بحث متغیرها می باشد. در ادامه با ارائه یک مثال بحث متغیرها را توضیح می دهیم. فرض کنید که یه نوع ظرف در دست داریم. برای این ظرف یک اسم در نظر می گیریم و سپس به آن یک مقدار مشخصی نسبت می دهیم. به شکل زیر:
                                                                  ;مقدار = اسم دلخواه   نوع ظرف
برای فهم بهتر یک مثال عینی از فرمول بالا در نظر می گیریم. فرض کنید در فرمول بالا به جای نوع ظرف یک دیگ، به جای اسم دلخواه حسن آقا و جای مقدار آش را قرار دهیم. به صورت زیر:"
    </string>
    <string name="f1m2">
        "به همین شکل می توانیم مثال های مختلفی شبیه به این مثال را ارائه دهیم. همانند این مثال، متغیرها نیز می توانند یک نوع مشخص، یک اسم و مقداری مشخص را در درون خود داشته باشند. متغیرها انواع مختلفی دارند که در ادامه با آن ها آشنا می شویم.
انواع متغیرها
1.	متغیرهای از نوع عددی
2.	متغیرهای از نوع Boolean یا منطقی
3.	متغیرهای از نوع character یا حرف
4.	متغیرهای از نوع string یا رشته"
    </string>
    <string name="f1m3">
        "در ادامه با تعریف و تفاوت های میان هریک از این دسته بندی ها بیشتر آشنا خواهیم شد.
در ابتدا برای فهم و درک بیشتر به توضیح در رابطه با نوع متغیرها می پردازیم. اگر نوع ظرف یا همان جنس ظرف خود در فرمول ذکر شده بالا را به عنوان شاخصی برای تفاوت هر نوع متغیر از نوع دیگر در نظر بگیریم می توان توضیح زیر را در نظر گرفت.
ظرف هایمان می تواند از نوع آهنی باشند که قابلمه،دیگ و مواردی از این دست را شامل می شود یا می تواند از نوع شیشه باشند که لیوان، پارچ و مواردی از این دست که از جنس شیشه هستند را در برمی گیرد.
متغیرها نیز می توانند همانند این دو نوع از ظرف بنا به نوع متغیر و یا مقداری که می خواهیم به آن متغیر نسبت دهیم با هم تفاوت داشته باشند.
        "
    </string>

    <string name="f2m1">
        متغیرهای عددی دو نوع هستند:
1.	متغیرهای عددی صحیح: متشکل از همان مجموعه اعداد صحیح در ریاضیات است. مثل مجموعه {...،1، 0، 1-،...}.
2.	متغیرهای عددی غیرصحیح: متشکل از همان اعداد اعشاری در ریاضیات است. مثل مجموعه {...،2.1، 0، 3.1-،...}.
در زبان جاوا متغیرهای عددی به چهار دسته زیر تقسیم می شوند:
1.	متغیرهای عددی از نوع byte
2.	غیرهای عددی از نوع short
3.	متغیرهای عددی از نوع int
4.	متغیرهای عددی از نوع long
تفاوت آن ها صرفا در ظرفیت آن ها یا به عبارت بهتر تعداد خانه هاییست که در حافظه اشغال می کنند.
این مثل ظرفیت یک قابلمه دو نفره و یک قابلمه 12 نفره یا یک دیگ است که مقدار غذایی که در آن ها قرار می گیرید با هم تفاوت دارد. البته دانستن این که در هر کدام از آن ها چه مقدار عددی جا می گیرد اهمیت چندانی برای ما ندارد و صرفا برای برنامه هایی که در آن ها از فرمول های محاسباتی استفاده می شود دانستن این نوع متغیر ها اهمیت پیدا خواهد کرد.
از پرکاربردترین نوع متغیرها در زبان اندروید نوع int و بعضیا در مواردی هم نوع long است و کاربرد نوع short و byte خیلی کمتر است.
نوع دیگر متغیرهای عددی، متغیرهای عددی غیرصحیح است که خود شامل دو نوع می باشد:
1.	متغیرهای عددی غیرصحیح از نوع float
2.	متغیرهای عددی غیرصحیح از نوع double
همانند مواردی که در بالا ذکر شد، تفاوت این دو متغیر نیز در ظرفیتی است که برای هر کدام تعریف شده است. همچنین نوع double نسبت به نوع float بیشتر مورد استفاده می باشد. پس در این مورد هم ما نیاز زیادی برای دانستن ظرفیت آن ها و استفاده از هر کدام به نسبت ظرفیتشان، نداریم و بیشتر از نوع double استفاده می کنیم.(البته ناگفته نماند که از نوع float در موارد دیگری به جز موارد محاسباتی استفاده می شود).

    </string>
    <string name="f2m2">
        حالا می خواهیم با استفاده از چند مثال از متغیرهای عددی، با نوع تعریف این دست متغیرها آشنا شویم.
    </string>
    <string name="f2m3">
        همانطور که در تصویر بالا مشاهده می کنید چند نوع متغیر همراه با یک اسم دلخواه و یک مقدار که به هر کدام از آن ها نسبت داده شده است، تعریف کرده ایم.
همانطور که در جلسه اول با نحوه تعریف متغیر آشنا شدید، ابتدا نوع متغیر را می نویسیم سپس یک اسم به آن اختصاص می دهیم و در آخر مقداری که قرار است در آن ذخیره کنیم را با استفاده از علامت تساوی نسبت می دهیم و در آخر علامت نقطه ویرگول می گذاریم تا برای کامپایلر اندرویداستودیو قابل فهم شود باشد. (همانطور که احتمالا می دانید برای این که کدهایی که می خواهیم بنویسیم قابل اجرا شدن باشد و برای محیط برنامه نویسی اندروید این کدها قابل فهم باشد باید در انتهای هر خط از برنامه علامت نقطه ویرگول را قرار دهیم).
همچنین تعریف متغیرهای عددی غیرصحیح هم به همین شکل می باشد. (ضمنا توجه کنید که در مورد متغیرهای float و double این نکته وجود دارد که می توانیم مقادیر غیرصحیح و هم صحیح را درونشان ذخیره کنیم. اما با توجه به این که این دو متغیر، تعداد بیشتری از خانه های حافظه را اشغال می کنند، بهتر است که برای ذخیره مقادیر صحیح از همان چهار نوع متغیر ذکر شده استفاده شود).

    </string>


    <string name="f3m1">
        حال می خواهیم در مورد دومین نوع متغیرها یعنی متغیر منطقی یا Boolean صحبت کنیم. این متغیر فقط از یک نوع boolean تشکیل شده است (که به معنی منطقی است) و فقط مقادیر true یا false را می توانیم به آن اختصاص دهیم.
برای آشنایی بیشتر مثالی را آورده ایم که در تصویر زیر مشاهده می کنید.

    </string>
    <string name="f3m2">
        همانطور که می بینید ابتدا نوع متغیر که همان boolean است را می نویسیم سپس یک اسم دلخواه برای آن در نظر گرفته و سپس یکی از مقادیر true و false را به آن اختصاص می دهیم. این متغیر اکثرا در مواردی استفاده می شود که با منطق یا شرط ها سر و کار داریم. اگر بخواهیم واضح تر بیان کنیم به این صورت در شرط ها استفاده می شود که بخواهیم در صورت درست یا غلط بودن چیزی چند خط کد اجرا شوند. (دوباره تاکید می شود که ما فقط مجاز هستیم از یکی از مقادیر true یا false استفاده کنیم).
سومین نوع متغیرهایی که وجود دارد متغیر کاراکتر یا حرف می باشد. این نوع متغیر هم فقط از یک نوع char تشکیل شده است که همان کوتاه شده عبارت character (حرف) است و می توانیم یک حرف مثل a و یا هر حرف دیگری از زبان انگلیسی و حتی فارسی و یا هر زبان دیگری را به آن اختصاص دهیم اما نمی توان یک کلمه را در آن ذخیره کنیم.
برای آشنایی بیشتر مثالی را آورده ایم که در تصویر زیر مشاهده می کنید.

    </string>
    <string name="f3m3">
        همانطور که می بینید همانند موارد قبل در این مورد هم ابتدا نوع متغیر که در اینجا char است را می نویسیم سپس یک اسم دلخواه برای آن در نظر می گیریم و در ادامه می توانیم که یک حرف مثل a یا t که در بالا آمده است را به آن نسبت دهیم اما باید دقت کنیم که این مقدار داخل تک کوتیشن ‘ ’ قرار می گیرد و فقط می تواند یک حرف را در خود ذخیره کند!
چهارمین نوع متغیرها، متغیر string یا رشته ای است. این نوع متغیر فقط از یک نوع string تشکیل شده است و می توان مقادیر حرف و یا کلمه ها را در آن ذخیره کرد.
برای آشنایی بیشتر مثالی را آورده ایم که در تصویر زیر مشاهده می کنید.

    </string>
    <string name="f3m4">
        همانطور که می بینید مانند موارد قبلی ابتدا نوع متغیرمان که string است را نوشته سپس یک اسم مثل s برای آن در نظر می گیریم و مقدار hello یا سلام را به آن نسبت می دهیم. نکته ای که باید به آن دقت کنیم این است که مقداری که در نظر می گیریم باید در داخل دابل کوتیشن یا همان “” باشد و این که علاوه بر کلمات می توانیم یک کاراکتر یا حرف را نیز در آن ذخیره کنیم. ( زبان جاوا و همچنین زبان برنامه نویسی اندروید case sensitive هستند یعنی به کوچک و یا بزرگ بودن حروف حساس هستند و برای دو کلمه string و String تفاوت قائل هستند. پس زمانی که ما این متغیر را تعریف می کنیم حتما باید توجه داشته باشیم که حرف S اول آن بزرگ باشد تا کامپایلر منظور ما را متوجه شود که می خواهیم یک متغیر از نوع رشته تعریف کنیم در غیر این صورت اگر با حرف کوچک آن را بنویسیم کامپایلر از ما خطا خواهد گرفت. در واقع سازندگان زبان های جاوا و اندرید به علت این که بتوانند بعضی از کلمات شاخص که جزئی از خود زبان می باشند را از کلمات مشابهی که خود برنامه نویسان در کدهایشان از آن ها استفاده می کنند تفکیک کنند این قانون را قرار داده اند).
    </string>


    <string name="f4m1">
        در این جلسه می خواهیم در مورد بحث آرایه ها در زبان برنامه نویسی جاوا صحبت کنیم. آرایه ها در واقع همان متغیرها هستند که برای راحتی کار و جلوگیری از تعریف چند باره یک نوع متغیر ساخته شده اند. اگر بخواهیم به صورت شهودی با مفهوم آرایه آشنا شویم می توانیم بگوییم آرایه در واقع یک ردیفی از خانه های کوچک مربعی شکل متصل به هم است که می توانیم با اختصاص دادن یک عدد به هر کدام از این خانه ها به آن خانه و محتوایی که درون آن خانه ذخیره شده دسترسی داشته باشیم.
خب حالا به همان مثال دیگ غذاخوری رجوع کنیم، فرض کنید که حسن آقا به جای یک دیگ غذاخوری چند دیگ غذاخوری دارد که در هر کدام از آن ها انوعی از آش ها وجود دارد. ما می توانیم در این مثال اینطور بیان کنیم که حسن آقا یک دیگ دارد که در آن آش وجود دارد. حسن آقا یک دیگ دارد که در آن آش دوغ وجود دارد و همینطور تا آخر... . اما در عوض می توانیم اینطور بیان کنیم که حسن آقا پنج دیگ دارد که در اولی آش در دومی آش دوغ در سومی ... و همینطور تا آخر. خب همانطور که می بینید نحوه بیان ما در جمله بندی دومی خیلی بهتر از جمله بندی اول است.

 این تفاوت دقیقا همان تفاوت مربوط به تعریف کردن یک متغیر و اختصاص یک مقدار به آن با استفاده از روش معمولی (که در جلسات قبل با آن آشنا شدیم) یا استفاده از ساختار آرایه هاست. یعنی در ساختار آرایه دیگر لازم نیست که هر بار و در چندین خط کد متغیر های مختلفی را از یک نوع متغیر، تعریف کرده و به آن مقادیر مختلفی را اختصاص دهیم. این کار در برنامه نویسی حرفه ای نیست و باعث سردرگمی خودمان و استفاده بیهوده از فضاهای حافظه می گردد که کارایی و سرعت اجرای برنامه را پایین می آورد. به جای این کار ما می توانیم یک ردیف از خانه های کوچک کنار هم در نظر بگیریم و در هر کدام مقادیری که می خواهیم اختصاص دهیم.
نحوه تعریف آرایه را در تصویر زیر مشاهده می کنید.

    </string>
    <string name="f4m2">
        با توجه به تصویر برای تعریف آرایه به این شکل عمل می کنیم که ابتدا نوع ظرف را تعیین می کنیم و در کنار آن یک کروشه باز و بسته شده قرار می دهیم که برنامه بفهمد می خواهیم یک آرایه تعریف کنیم سپس یک اسم برای آن در نظر گرفته و در مرحله بعدی بایستی مقادیری را به آن نسبت دهیم با این تفاوت که چند مقدار می توانیم اختصاص دهیم اما مقادیر ما همگی باید در داخل یک آکولاد باز و بسته شده قرار بگیرند.
حال می خواهیم برای آشنایی بیشتر چند مثال را با هم بررسی کنیم.

    </string>
    <string name="f4m3">
        خب همانطور که در تصویر می بینیم می توانیم از همه نوع متغیر مثالی بیاوریم و مقادیری که آن نوع متغیر قبول می کند را با استفاده از آکولاد باز و بسته و گذاشتن ویرگول بین هر عضو از آرایه برای مشخص کردن تعداد خانه های موجود در آرایه، درون آن بریزیم. فقط نکته ای که وجود دارد در مورد نوع string و char است که هنگام مقدار دادم به هر کدام باید آن را داخل دابل کوتیشن یعنی("") و تک کوتیشن یعنی(‘’) قرار دهیم.
    </string>


    <string name="f5m1">
        شرط ها:
بخش دیگری که در برنامه نویسی جاوا وجود دارد و ما باید به آن بپرازیم شرط ها هستند شرط کد ها را به صورتی برنامه ریزی میکند که اگر شرط برقرار بود یکسری دستورات اجرا شود و اگر برقرار نبود اجرا نشوند.
نحوه موشتن شرط ها به چه صورت است؟
مورد اولی که وجود دارد به شکل زیر است :
{( شرط )If
                                                              دستورات
                                                                       {
که اگر شرط برقرار باشد دستوراتی که در if قرار گرفته اجرا می شوند و در غیراینصورت بدون اجرای دستورات به انتهای if می رویم.
مثال :
Int i=7
If( i>5 ) {
;عدد انتخابی درست است
}
که در این مثال متغیر i برابر با 7 انتخاب شده در شرط if گفته شده که اگر i بزرگتر از 5 بود دستوراتی که در if قرار دارد اجرا شود ؛ که چون شرط صحیح است و 7>5 میباشد پس به ما عبارت عدد انتخابی صحیح است را بر میگرداند.(البته این دستور در اندروید به این شکل قابل اجرا نبوده و صرفا جهت آموزش بدین صورت نوشته شده است)

    </string>
    <string name="f5m2">
        نوع دیگری از شرط ها به شکل زیر است:
{(شرط )If
;دستورات1
} else {
;دستورات
}
else یعنی اگر شرط برقرار نبود یکسری دستورات دیگری اجرا شود
اگر شرط if برقرار بود که دستورات 1 اجرا شده و else اجرا نمیشود و به خط بعد از پایان else می رویم در حالی که شرط if غلط بود else اجرا می شود.
Int i=4;
If( i>5 ) {
;عدد انتخابی درست است
}else {
;عدد انتخابی غلط است
}
که در این مثال متغیر i برابر با 4 انتخاب شده در شرط if گفته شده که اگر i بزرگتر از 5 بود دستوراتی که در if قرار دارد اجرا شود ؛ که چون شرط غلط است و >54 نمی باشد پس شرط اجرا نمی شود و به سراغ قسمت بعدی یعنی else می رود و دستور آنجا اجرا می شود و در خروجی عدد انتخابی غلط است را نشان می دهد.(البته این دستور در اندروید به این شکل قابل اجرا نبوده و صرفا جهت آموزش بدین صورت نوشته شده است)

    </string>
    <string name="f5m3">
        "
        نوع سوم شرط ها به صورت زیر است:
{(شرط )If
;دستورات1
} else if () {
دستورات
}
در اینجا دو شرط مورد بررسی قرار می گیرد که اگر شرط اول برقرار باشد دستورات1 اجرا شده و به پایان if میرویم و در صورتی که شرط اول غلط بود به بررسی شرط دوم می پردازد در صورت صحیح بودن دستورات آن اجرا مییشود، که به همین شکل تعداد دیگری else if میتوان به ادامه ی آن اضافه کرد .
Int i=4;
If( i>5 ) {
;عدد انتخابی درست است
}else if ( i &lt; 5) {
;عدد انتخابی غلط است
}
که در این مثال متغیر i برابر با 4 انتخاب شده در شرط if گفته شده که اگر i بزرگتر از 5 بود دستوراتی که در if قرار دارد اجرا شود ؛ که چون شرط غلط است و >54 نمی باشد پس شرط اول اجرا نمی شود و به سراغ شرط بعدی می رود و دستور آنجا اجرا می شود و در خروجی عدد انتخابی غلط است را نشان می دهد.(البته این دستور در اندروید به این شکل قابل اجرا نبوده و صرفا جهت آموزش بدین صورت نوشته شده است)
"
    </string>


    <string name="f6m1">
        بریم سراغ نوع چهارمی از شرط هایی که وجود دارند که کمی متفاوت با if هایی که دیدیم هستند و کاربردشون چیه؟ وقتی که تعداد if ها و شرط ها بیشتره معمولاً از این مورد استفاده می کنیم که Switch Case نامیده می شود.
    </string>
    <string name="f6m2">
        نحوه نوشتن Switch Case به چه صورت میباشد؟
 مینویسیم (نوع متغیر)Switch بعد نوع متغیر را می نویسیم در قسمت if ها داخل پرانتز شرط را می نوشتیم اما اینجا متغیر نوشته می شود و در ادامه  (مقدار متغیر)Case نوشته می شود که مقداری که میتونه به متغیر Switch مربوط باشد قرار میگیرد و در خط بعد دستورات و در نهایت break که در ادامه توضیح میدهم برای چه کاری استفاده می شود و دوباره Case بعدی مقدار و دستورات و break و در نهایت دستور default .
 default چیست ؟
Switch میتواند حاوی تعداد زیادی Case باشد و محدود به یکی دوتا نیست و میتونیم 5 تا 10تا و حتی تعداد بیشتری Case متفاوت بنویسیم و در نهایت default  را قرار دهیم که اگر هیچکدام از Case ها با متغییر یکسان نبودند  یکسری دستوراتی که در  default قرار گرفته اجرا شود.
Break چیست؟
 کاربردش این هست که در صورت درست بودن یکی از  Case ها و اجرا شدن دستورات آن به انتهای Switch میرویم و دستورات پس از آن که در  Switch قرار دارد اجرا نمی شود اگر break وجود نداشته باشد تمامی  Case های بعدی را هم بررسی میکند هرچند ممکن است غلط باشند و اجرا نشوند که موجب بالا بردن زمان اجرای برنامه می شود اما با وجود این دستور وقتی مقدار Case صحیح باشد پس از اجرا کردن دستورات آن توسط break کلا از Switch Case خارج شده و از خط بعد از Switch اجرا می شود مثلا اگر Switch شامل 20 Case باشد و جواب درست در سومین Case باشد دیگر نیازی به برسی 17 Case بعدی نبوده و به انتهای Switch میرویم.
مثال:
int i=4;
Switch (i){
	Case 5;
	    عدد غلط است;
	    break;
	Case 5;
	    عدد درست است;
	    break;
	default
	    عدد دیگری وارد کنید;
}



پس کلا دو نوع شرط داریم
1.	If
2.	Switch
پس این روندی بود که در شرط ها داشتیم و در برنامه نویسی از آن استفاده میکنیم .

    </string>


    <string name="f7m1">
        در این جلسه می خواهیم در رابطه با بحث حلقه ها در زبان برنامه نویسی جاوا استفاده کنیم. فرض کنید که نیاز داریم که یک یا چند خط کد به تعداد بیشتر از یکبار تکرار شود در حالت عادی باید این کد را چند بار پشت سرهم تکرار کنیم که در این صورت حجم کدهای ما زیادتر شده و بهینه و درست نیست. اما حلقه ها کار را برای ما آسان تر می کنند. به این شکل که آن چند خط را در یک حلقه قرار می دهیم تا بتوانیم چند بار از آن استفاده کنیم. انواع مختلفی از حلقه ها وجود دارد. در ابتدا ما به بررسی حلقه for می پردازیم.
شماتیک حلقه for را در تصویر زیر می بینید.

    </string>
    <string name="f7m2">
        همانطور که مشاهده می کنید در ابتدا کلمه for را می نویسیم و سپس یک پرانتز باز و بسته قرار می دهیم. همانطور که می بینید داخل پرانتز از چند قسمت تشکیل شده که هر قسمت به وسیله نقطه ویرگول از هم جدا می شود. اولین قسمت مربوط به تعریف متغیر است. در این قسمت ما یکی متغیر که معمولا از نوع عددی و معمولا از نوع int است تعریف می کنیم. در قسمت بعدی شرط حلقه وجود دارد. این قسمت مهم ترین قسمت حلقه است که در آن شرطی برای متغیر تعریف شده در نظر گرفته می شود که قبل از ورود به حلقه یک بار درست یا غلط بودن آن بررسی می شود که اگر درست بود که وارد حلقه می شود و دستورات داخل حلقه اجرا می شود و اگر غلط بود از حلقه بیرون آمده و اولین کد بعد از حلقه اجرا می شود. در اینجا ما شرایط قطع حلقه و بیرون پریدن برنامه از حلقه را در نظر می گیریم. قسمت بعدی گام حلقه است. در این قسمت تعیین می کنیم که متغیر ما یک عدد افزایش یا کاهش داشته باشد و سپس بعد از آن دوباره شرط حلقه بررسی می شود. اگر درست بود باز هم دستورات حلقه اجرا می شود و اگر غلط بود از حلقه بیرون آمده و دستورات بعد از حلقه اجرا خواهد شد.
خب حالا برا فهم بهتر مثالی را که در تصویر می بینید با هم مورد بررسی قرار می دهیم.

    </string>
    <string name="f7m3">
        خب ابتدا کلمه for را می نویسیم سپس پرانتز باز کرده و قسمت ها را یکی یکی می نویسیم. ابتدا متغیری از نوع int و به اسم i تعریف کرده و در همانجا به آن مقدار دهی کرده و عدد صفر را نسبت می دهیم. سپس در مرحله بعدی که شرط حلقه قرار دارد این شرط را می گذاریم که تا زمانی که متغیر i کوچکتر از 10 بود حلقه ادامه پیدا کند و به محض این که متغیر حلقه به عدد 10 رسید شرط نقض شده و برنامه از حلقه بیرون می آید. در قسمت بعدی گام حلقه وجود دارد که دستور i++ را اجرا می کند. i++ به این معنی است که در هر مرحله از اجرای حلقه i یک واحد اضافه شود. در واقع i++ کوتاه شده دستور i=i+1; می باشد. این یعنی این که در هر مرحله از اجرا مقدار i را یکی واحد افزایش بده و در داخل i بریز. در واقع با این کار مقدار i یک واحد افزایش پیدا کرده و داخل i قبلی ریخته می شود که i جدید بدست آمده یک بروز شده و یک واحد افزایش یافته است.
    </string>
    <string name="f7m4">
        حال با هم مرحله به مرحله حلقه را اجرا کرده و شرط حلقه را بررسی می کنیم.
طبق تصویر بالا اولین بار که می خواهد اجرا شود i=0 است که این یعنی شرط حلقه که i&lt;10 برقرار می باشد پس دستورات اجرا می شوند که در اینجا روی صفحه نمایشگر (سلام، حال شما خوب است؟) نمایان خواهد شد. سپس دوباره به ابتدای حلقه بر می گردیم ابتدا گام حلقه اجرا می شود یعنی i=1 خواهد شد. سپس دوباره شرط حلقه بررسی خواهد شد یعنی i&lt;10 که اینبار هم صحیح است پس دوباره دستورات اجرا می شود و دوباره به ابتدای حلقه بازگشته و همین روال انجام می شود تازمانی که برای بار دهم دستورات اجرا شده و 10 بار پیام (سلام، حال شما خوب است؟) روی صفحه نمایشگر نمایان می شود. بعد که دوباره برای بار یازدهم به ابتدای حلقه باز می کردیم گام حلقه اجرا می شود و i=10 خواهد بود و در این حالت دیگر شرط برقرار نیست و i&lt;10  نقض شده و از حلقه خارج می شود.

    </string>


    <string name="f8m1">
        در این جلسه می خواهیم در مورد انواع دیگری از حلقه ها در زبان برنامه نویسی جاوا صحبت کنیم.
نوع دیگری از حلقه ها وجود دارد که به آن حلقه های بی نهایت گفته می شود. به این معنی که در این نوع حلقه ها بر خلاف حلقه for که با توجه به شرطی که برای حلقه در نظر می گرفتیم دستورات به تعداد مشخصی اجرا می شد و سپس برنامه از حلقه بیرون می آمد، تعداد بار اجرای دستورات داخل حلقه مشخص نیست. در این نوع حلقه ها تعداد بار اجرای حلقه مشخص نیست ممکن است یکبار باشد و ممکن است ده بار.
حلقه while دقیقا به همین صورت است. در تصویر زیر با نحوه عملکرد این حلقه آشنا می شویم.

    </string>
    <string name="f8m2">
        همانطور که در تصویر می بینید در ابتدا کلمه while را نوشته و در پرانتز شرط حلقه نوشته می شود و بعد از آن دستورات اجرا می شود. این بدین معناست که تا زمانی که شرط برقرار بود دستورات داخل حلقه اجرا می شود در غیر این صورت برنامه از حلقه بیرون آمده و اولین خط بعد از حلقه اجرا می شود. ممکن است این حلقه یکبار ده بار و یا صد بار اجرا شود. حال مثالی از آن را می بینیم.
همانطور که مشاهده می کنید در ابتدا یک متغیر تعریف می کنیم به اسم i و از نوع int و به آن یک مقدار اولیه 7 را می دهیم. بعد از آن حلقه while اجرا می شود. با توجه به شرط حلقه که i&lt;5 است در مرحله اول شرط حلقه بررسی می شود و چون شرط برقرار نیست کلا وارد حلقه نشده و دستورات حلقه اجرا نخواهد شد. حال فرض کنید i که مقدار دهی اولیه شده است کوچکتر از 5 باشد و شرط برقرار باشد. در این صورت دستورات اجرا شده و روی نمایشگر عبارت (عدد دیگری را وارد نمایید) نمایش داده می شود. اگر عدد وارد شده از سمت کاربر کوچکتر از 5 بود دوباره حلقه اجرا می شود. در غیر این صورت از حلقه بیرون می آید. این حلقه تا زمانی که کاربر عددی بزرگتر از 5 وارد کند اجرا می شود.
نوع دیگری از حلقه بی نهایت به اسم do while وجود دارد. در این نوع حلقه جدای از این که شرط حلقه برقرار هست یا خیر برای بار اول دستورات حلقه اجرا می شود و در ادامه شرط حلقه بررسی خواهد شد که اگر شرط برقرار بود دوباره برنامه به ابتدای حلقه خواهد رفت و دستورات اجرا خواهد شد. در غیر این صورت برنامه از حلقه خارج خواهد شد.
در ادامه با نحوه عملکرد حلقه do while و مثالی از آن آشنا می شویم.

    </string>
    <string name="f8m3">
        همانطور که می بینید به این نحوه نوشته می شود که ابتدا کلمه do را می نویسیم و سپس یک آکولاد باز کرده و دستورات را در داخل آن می نویسیم و سپس کلمه while را نوشته و شرطی برای حلقه در می گذاریم.
حال همانطور که در مثال می بینید ابتدا یکبار و بدون در نظر گرفتن شرط حلقه در بار اول، دستور (عدد بعدی را وارد نمایید) اجرا می شود و این عبارت به نمایش در می آید. در ادامه اگر عدد وارد شده از سمت کاربر با توجه به شرط برقرار بود حلقه برای بار بعدی اجرا می شود و برنامه دوباره دستور داخل do را اجرا می ند و در غیر این صورت از حلقه خارج خواهد شد.

    </string>


    <string name="f9m1">
        در این جلسه می خواهیم در مورد یکی از مباحث مهم و پرکاربرد در برنامه نویسی جاوا بحث خواهیم کرد. بحث شیء گرایی یکی از پر اهمیت ترین مباحث و مفاهیم در برنامه نویسی جاوا می باشد که باعث وجه تمایز آن با زبان های غیر شیء گرای دیگر مثل سی شده است.
در این جلسه قرار است درباره مفهوم و کلیت شیء گرایی صحبت کنیم. این که نحوه استفاده از شیء گرایی به چه صورت است را زمانی متوجه خواهیم شد که در برنامه نویسی اندروید وارد شده و بخواهیم از آن استفاده کنیم. شیء گرایی در واقع یکی ویژگی و نه یک تکنیک کد نویسی است، که با عث می شود کد نویسی برای ما راحت تر شود.

    </string>
    <string name="f9m2">
        با یک مثال شروع می کنیم فرض کنیم در اتاقی مشابه اتاق بالا هستیم و می خواهیم دنبال تمام عروسک هایی بگردیم که رنگ آن ها آبی است. مسلما گشتن داخل اتاق پر از عروسک و پیدا کردن عروسک های مورد نظر ما کار بسیار سختی است. حال فرض کنید داخل اتاقی هستید که سبدهایی با رنگ های مختف وجود دارند به طوری که هر عروسک در سبد همرنگ با خودش قرار داده شده است و کاملا قابل تمایز و تفکی هستند.
    </string>
    <string name="f9m3">
        خب همانطور که می بینید در آن اتاق شلوغ به خاطر به هم ریختگی زیاد و نداشتن نظم کار برای پیدا کردن عروسک مد نظر ما بسیار دشوار و زمان بر است. اما در اتاق دوم چون به صورت تفکیک شده عروسک ها تقسیم شده اند بنابراین بدون کمترین دردسری عروسک های آبی قابل شناسایی هستند.
همین قضیه در مورد کدنویسی با استفاده از شیء گرایی نیز صدق می کند. همانطور که در اتاق دوم عروسک ها خیلی منظم تر چیده شده بودند در واقع در کدنویسی هم با این ویژگی کدهای ما بسیار منظم تر هستند و قسمت های مختلف برنامه قابل تشخیص است. از طرف دیگر زمان گشتن و پیدا کردن عروسک ها در اتاق دوم خیلی کمتر است به همین نسبت سرعت کار در کدنویسی با استفاده از شیء گرایی نیز بالاتر می رود.
پس همانطور که دیدیم چهار ویژگی درباره مزایای برنامه نویسی شیءگرا وجود دارد که عبارت است از:
1.	نظم
2.	دسترسی راحت تر
3.	سرعت بیشتر
4.	تغییرات راحت تر
تا به اینجا مفهوم شیءگرایی را به طور کامل توضیح دادیم حال به پیاده سازی شیءگرایی در زبان برنامه نویسی جاوا می پردازیم. خب همانطور که در تصویر زیر می بینید برای پیاده سازی مفهوم شیءگرایی به دو ابزار نیازمندیم.
1.	کلاس
2.	شیء
اگر بخواهیم شهودی توضیح دهیم در واقع کلاس یک مجموعه بزرگ است و شیء در واقع یک زیرمجموعه یا یک نمونه کوچک از آن مجموعه بزرگ است که به تنهایی تمامی یا بخشی از ویژگی های آن مجموعه بزرگ تر را دارا می باشد.
حال در ادامه بیشتر در این مورد توضیح می دهیم تا بهتر متوجه شوید.
کلاس خود از دو جزء تشکیل شده است.
1.	ویژگی ها
2.	رفتارها. که رفتارها در واقع کارهایی است که به وسیله ویژگی ها انجام می شود.

    </string>
    <string name="f9m4">
        به عنوان مثال، اتاقی که پر از اسباب بازی های مختلف وجود داشت، کلاس می شود اسباب بازی ها با رنگ های مختلف و شی می شود اسباب بازی با رنگ آبی که می توان به راحتی به آن دسترسی داشت.
    </string>


    <string name="f10m1">
        در این جلسه می خواهیم به طور کامل با نحوه پیاده سازی شیءگرایی آشنا شویم. در جلسه قبلی با مفهوم شیءگرایی و اجزا و ابزار تشکیل دهنده شیءگرایی آشنا شدیم که شامل کلاس و شیء بود. در این جلسه می خواهیم به توضیح این دو مفهوم بپرد
    </string>
    <string name="f10m2">
        ابتدا درباره مفهوم کلاس صحبت خواهیم کرد. فرض کنید کلاسی به اسم کلاس ماشین داریم. هر کلاسی ویژگی هایی دارد که در واقع اجزای سازنده آن کلاس می باشند. همانطور که طبق تصویر زیر می بینید این ماشین دارای ویژگی هایی می باشد مثل چرخ، در، چراغ، آینه و... . این ها همان ویژگی های کلاس ماشین می باشند.
ابزار دوم شیءگرایی رفتارها است. در کلاس ماشین رفتارها در واقع هما استفاده ای است که می توانی از این ویژگی ها داشته باشیم. مثلا چون کلاس ماشین دارای ویژگی چرخ می باشد پس می تواند حرکت کند. پس حرکت کردن به عنوان یک رفتار برای کلاس ماشین تلقی می شود. یا این که چون این ماشین درب دارد پس باز یا بسته شدن درب به عنوان یک رفتار برای کلاس ماشین تلقی می شود. همچنین ماشین دارای ویژگی چراغ است پس روشن و خاموش شدن چراغ هم به عنوان یک رفتار برای کلاس ماشین در نظر گرفته می شود.
حال می خواهیم در رابطه با رابطه بین کلاس و شیء صحبت کنیم و می خواهیم بدانیم شیء چیست؟

    </string>
    <string name="f10m3">
        فرض کنید کلاسی تحت عنوان کلاس ماشین داریم. حال اگر بخواهیم مثلا ماشین بنز را بسازیم دیگر لازم نیست که ویژگی هایی مثل داشتن چرخ و آینه و چراغ و موتور و دینام و ... را تعریف کنیم. در اینجا فقط کافی است که یکبار کلاس ماشین را تعریف کرده و از آن برای ساختن ماشین بنز یا بوگاتی یا لامبورگینی استفاده کنیم. به این شکل که هنگام ساختن ماشین بنز این را ذکر می کنیم که ماشین بنز یک زیرمجموعه یا یک نمونه از مجموعه بزرگ(کلاس) ماشین ها با تمام ویژگی ها و رفتارهای مختص به آن است. یعنی حرکت می کند دربش باز و بسته می شود و ویژگی هایی مثل داشتن چراغ و ترمز و ... دارد.
حال نکته ای وجود دارد و آن هم این است که امکان دارد که ماشینی مثل تسلا قابلیت های دیگری مثل داشتن قابلیت شارژ برقی باشد. در این صورت بعد از تعریف ماشین تسلا و نسبت دادن آن به کلاس ماشین ها، ویژگی هایی جدیدی و تعریف نشده ای که منحصر به این نمونه از کلاس ما است را تعریف می کنیم اما دیگر لازم نیست که تمام ویژگی های کلاس ماشین را دوباره تعریف کنیم.
از این ویژگی شیءگرایی نه تنها در زبان جاوا و اندروید بلکه در هر زبان شیءگرای دیگری استفاده می شود که کار برنامه نویسان را بسیار راحت تر کرده است و دیگر به نوشتن کدهای اضافه تر و گذاشتن زمان بیشتر در برنامه نویسی نیست. فقط کافی است موارد استفاده این ویژگی را بدانیم و بتوانیم هوشمندانه در مواقع ضروری از آن استفاده کنیم. با این ویژگی و استفاده از آن در هنگام کار با زبان برنامه نویسی اندروید بیشتر آشنا می شویم.

    </string>


    <string name="info">
        "محتوای این برنامه توسط بنده آماده و نوشته شده است و برای اطلاعات بیشتر و آموزش های بیشتر دراین زمینه می توانید به سایت زیر مراجعه نمایید

        kazemieh.com"
    </string>
</resources>